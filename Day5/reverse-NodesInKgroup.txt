Node *getListAfterReverseOperation(Node *head, int n, int b[]) {
  if (head == NULL)
    return head;

  Node *dummy = new Node(0);
  dummy->next = head;
  Node *cur = dummy;
  Node *nex = dummy;
  Node *pre = dummy;
  int count = 0;

  // Calculate the size of the linked list
  while (cur->next != NULL) {
    cur = cur->next;
    count++;
  }

  for (int i = 0; i < n; i++) {
    if (count == 0)
      break;
    else if (b[i] == 0)
      continue;    
    else {
      cur = pre->next;
      nex = cur->next;

      for (int j = 0; j < min(count-1,b[i] - 1); j++) {
        cur->next = nex->next;
        nex->next = pre->next;
        pre->next = nex;
        nex = cur->next;
      }

      pre = cur;
      count -= b[i];
      if(count<0) count=0;
    }
  }

  return dummy->next;
}











Node* getListAfterReverseOperation(Node* head, int n, int b[]) {
    if (head == NULL)
        return head;

    Node* dummy = new Node(0);
    dummy->next = head;
    Node* cur = dummy;
    Node* nex = dummy;
    Node* pre = dummy;
    int count = 0;

    // Calculate the size of the linked list
    while (cur->next != NULL) {
        cur = cur->next;
        count++;
    }

    for (int i = 0; i < n; i++) {
        if(count==0) break;
        if(b[i]==0) continue;
        if(count >= b[i]) {
            cur = pre->next;
            nex = cur->next;
            
            for (int j = 0; j < b[i]-1; j++) {
                cur->next = nex->next;
                nex->next = pre->next;
                pre->next = nex;
                nex = cur->next;
            }
            
            pre = cur;
            count -= b[i];
        }
        else if(count<b[i]){
            cur = pre->next;
            nex = cur->next;
            
            for (int j = 0; j < count-1; j++) {
                cur->next = nex->next;
                nex->next = pre->next;
                pre->next = nex;
                nex = cur->next;
            }
            
            pre = cur;
            count=0;
        }
    }

    return dummy->next;
}