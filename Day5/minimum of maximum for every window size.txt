vector<int> previousLarger(vector<int>& arr, int n) {
    vector<int> prev(n);
    stack<int> s;

    for (int i = 0; i < n; i++) {
        while (!s.empty() && arr[s.top()] <= arr[i]) {
            s.pop();
        }

        if (s.empty()) {
            prev[i] = -1;
        } else {
            prev[i] = s.top();
        }

        s.push(i);
    }

    return prev;
}

vector<int> nextLarger(vector<int>& arr, int n) {
    stack<int> s;
    vector<int> next(n);

    for (int i = n - 1; i >= 0; i--) {
        while (!s.empty() && arr[s.top()] <= arr[i]) {
            s.pop();
        }

        if (s.empty()) {
            next[i] = n;
        } else {
            next[i] = s.top();
        }

        s.push(i);
    }

    return next;
}

vector<int> minMaxWindow(vector<int>& arr, int n) {
    vector<int> answer(n, INT_MAX);

    vector<int> next = nextLarger(arr, n);
    vector<int> prev = previousLarger(arr, n);

    for (int i = 0; i < n; i++) {
        int length = next[i] - prev[i] - 1;
        answer[length - 1] = min(answer[length - 1], arr[i]);
    }

    for (int i = n - 2; i >= 0; i--) {
        answer[i] = min(answer[i], answer[i + 1]);
    }

    return answer;
}
