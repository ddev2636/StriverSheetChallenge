#include <bits/stdc++.h>

void dfs(int node, vector<int> &vis, vector<vector<int>> &adjList,
         stack<int> &st) {
  vis[node] = 1;
  for (auto it : adjList[node]) {
    if (!vis[it])
      dfs(it, vis, adjList, st);
  }
  st.push(node);
}

void dfs2(int node, vector<int> &vis, vector<vector<int>> &adjT,
          vector<int> &v) {
  vis[node] = 1;
  v.push_back(node);
  for (auto it : adjT[node]) {
    if (!vis[it])
      dfs2(it, vis, adjT, v);
  }
}

vector<vector<int>> stronglyConnectedComponents(int n,
                                                vector<vector<int>> &edges) {
  vector<vector<int>> adjList(n);
  vector<int> vis(n, 0);
  for (auto it : edges) {
    adjList[it[0]].push_back(it[1]);
  }
  stack<int> st;
  for (int i = 0; i < n; i++) {
    if (!vis[i])
      dfs(i, vis, adjList, st);
  }
  vector<vector<int>> adjT(n); // reversing the edges
  for (int i = 0; i < n; i++) {
    vis[i] = 0; // vis is marked to 0 for every node
    for (auto it : adjList[i]) {
      adjT[it].push_back(i);
    }
  }

  int scc = 0;
  vector<vector<int>> ans;
  while (!st.empty()) {
    int node = st.top();
    st.pop();
    if (!vis[node]) {
      vector<int> v;
      scc++;
      dfs2(node, vis, adjT, v);
      ans.push_back(v);
    }
  }
  return ans;
}
