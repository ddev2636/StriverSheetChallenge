#include <bits/stdc++.h>



vector<pair<pair<int, int>, int>> calculatePrimsMST(int n, int m,
                                                   vector<pair<pair<int, int>, int>> &g) { //{u,v,wt}

    // adjList->{node,wt}
    vector<vector<pair<int, int>>> adjList(n+1);
    for (auto it : g) {
        int u = it.first.first;
        int v = it.first.second;
        int w = it.second;
        adjList[u].push_back({v, w});
        adjList[v].push_back({u, w});
    }

    priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;
    //{wt,{node,parent}}
    pq.push({0, {1, -1}});

    vector<int> vis(n+1, 0);

    vector<pair<pair<int, int>, int>> res;

    while (!pq.empty()) {
        int wt = pq.top().first;
        int node = pq.top().second.first;
        int parent = pq.top().second.second;
        pq.pop();  
        if(vis[node])  continue;    

        vis[node] = 1;
        // cout<<node<<parent<<wt<<endl;

        if (parent != -1) {
           
            res.push_back({{node, parent}, wt});
           // cout<<node<<parent<<wt<<endl;
        }
        for (auto it : adjList[node]) {
            int nextnode = it.first;
            int weight = it.second;
            if (!vis[nextnode]) {
                pq.push({weight, {nextnode, node}});
            }
        }
    }

    return res;
}


