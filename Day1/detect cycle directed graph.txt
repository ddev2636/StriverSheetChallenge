#include <bits/stdc++.h>



bool dfsCheck(int node, vector<vector<int>>& adj, vector<int>& vis, vector<int>& pathVis) {
    vis[node] = 1;
    pathVis[node] = 1;
    for (auto it : adj[node]) {
        if (!vis[it]) {
            if (dfsCheck(it, adj, vis, pathVis))
                return true;
        } else if (pathVis[it]) {
            return true;
        }
    }
    pathVis[node] = 0;
    return false;
}

bool detectCycleInDirectedGraph(int n, vector<pair<int, int>>& edges) {
    vector<int> vis(n + 1, 0);
    vector<int> pathVis(n + 1, 0);

    vector<vector<int>> adj(n + 1);
    for (auto x : edges) {
        adj[x.first].push_back(x.second);
    }

    for (int i = 1; i <= n; i++) {
        if (!vis[i]) {
            if (dfsCheck(i, adj, vis, pathVis))
                return true;
        }
    }
    return false;
}